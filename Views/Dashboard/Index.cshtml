@model Ouroboros.Models.DashboardModel
@{
	ViewData["Title"] = "Dashboard";
}

<h1>Dashboard</h1>

Logged in as
@(Model.User.GithubPretty ?? Model.User.GithubName) (@Model.User.HeadscaleName on Headscale)

<div class="formwrap" style="display: contents">
	<form asp-controller="Auth" asp-action="Logout">
		<input type="hidden" name="then" value="/ouroboros/dashboard"/>
		<button type="submit">Click here to log out</button>
	</form>
</div>

<details>
	<summary>Add a device...</summary>
	
	<div style="padding-left: .5rem; margin-left: .5rem; border-left: 1px solid gray">
		<h2>Add a device interactively</h2>
        	
        <p>The login server URL is <code>https://@Config.C.hs_login_url</code>.</p>
        
        <p>On Linux, you can use <code>tailscale up --login-server=https://@Config.C.hs_login_url</code>.</p>
        <p>
        	On Android, you repeatedly open the menu on the menu on the login screen until you have the
        	<code>Change Server</code> option.
        </p>
        <p>
        	On Windows, you can edit the registry <a href="https://headscale.net/windows-client/">as shown here</a>.
        	Supposedly you can also use the command line as is on Linux, but this may have config persistence issues.
        </p>
        <p>
        	On iOS, you can find Tailscale in the iOS settings app, and put the login server URL into
        	<code>Alternative Coordination Server URL</code>.
        </p>
        
		@*<h2>Add a device via auth key</h2>
		<p>
			See instructions on using auth keys <a href="https://tailscale.com/kb/1085/auth-keys">here</a>.
		</p>
		<details>
			<summary>Generate an auth key</summary>
			
			<form style="padding-left: .5rem; margin-left: .5rem; border-left: 1px solid gray">
				<div>
					<label for="genkey-reusable">Reusable</label>
					<input type="checkbox" name="reusable" id="genkey-reusable" />
				</div>
				<div>
					<label for="genkey-expiry">Expiry</label>
					<input type="text" name="Expiry" id="genkey-expiry" />
				</div>
				<button type="submit">Generate</button>
			</form>
		</details>
		
		@if (false) $1$ Model.Keys.Length > 0 #1#
		{
			<h3>Existing auth keys</h3>
			$1$ @foreach (var key in Model.Keys)
			{
			} #1#
		}*@
	</div>
</details>

<h2>Your Nodes</h2>

<table>
	<thead>
	<th>Name</th>
	<th>IP Addresses</th>
	<th>Status</th>
	<th>Actions</th>
	</thead>
	<tbody>
	@foreach (var node in Model.YourNodes)
	{
		var hasENode = Model.YourExitNodes.TryGetValue(node.Id, out var enode);
		var eNodeEnabled = hasENode && (enode.Item1.Enabled && enode.Item2.Enabled);
		
		<tr>
			<td>@node.GivenName @(node.GivenName != node.Name ? $"({node.Name})" : "")</td>
			<td>
				@foreach (var ip in (node.IpAddresses ?? []).Order())
				{
					<div><code>@ip</code></div>
				}
			</td>
			<td>
				<div>@(node.Online ? "Online" : $"Last seen {node.LastSeen.Parse()}")</div>
				@if (hasENode)
				{
					<div>Exit Node @(eNodeEnabled ? "Enabled" : "Advertised")</div>
				}
			</td>
			<td class="formwrap">
				@* make this work without js, with js html5 dialog will override it. *@
				<form asp-action="DeleteNode">
					<input type="hidden" name="id" value="@node.Id" />
					<button type="submit" onclick="this.parentElement.nextElementSibling.showModal(); event.preventDefault()">Delete node</button>
				</form>
				<dialog>
					<p>Delete this node? this is irreversible.</p>
					<form asp-action="DeleteNode">
						<input type="hidden" name="id" value="@node.Id" />
						<button type="submit">Yes, delete</button>
					</form>
					<form method="dialog">
						<button type="submit">No!</button>
					</form>
				</dialog>

				<form asp-action="ExpireNode">
					<input type="hidden" name="id" value="@node.Id" />
					<button type="submit" onclick="this.parentElement.nextElementSibling.showModal(); event.preventDefault()">Logout node</button>
				</form>
				<dialog>
					<p>Logout (expire) this node? It will remain setup on your tailnet but need reregistering to come online.</p>
					<form asp-action="ExpireNode">
						<input type="hidden" name="id" value="@node.Id" />
						<button type="submit">Yes, logout</button>
					</form>
					<form method="dialog">
						<button type="submit">No!</button>
					</form>
				</dialog>

				@* requires js because using <details> here would be horrid. *@
				<button class="js-only" onclick="this.nextElementSibling.showModal(); event.preventDefault()">Rename</button>
				<dialog>
					@if (node.GivenName == node.Name)
					{
						<p>Pick a new name for "@node.GivenName"</p>
					}
					else
					{
						<p>Pick a new name for "@node.GivenName", originally called "@node.Name"</p>
					}

					<form asp-action="RenameNode">
						<input type="hidden" name="id" value="@node.Id" />
						<input type="text" name="name" />
						<button type="submit">Rename</button>
					</form>
					<form method="dialog">
						<button type="submit">Cancel</button>
					</form>
				</dialog>
				
				
				@if (eNodeEnabled)
				{
				<form asp-action="DisableENode">
					<input type="hidden" name="id4" value="@enode.Item1.Id" />
					<input type="hidden" name="id6" value="@enode.Item2.Id" />
					<button type="submit">Disable Exit Node</button>
				</form>
				}
				else if (hasENode)
				{
				<form asp-action="EnableENode">
					<input type="hidden" name="id4" value="@enode.Item1.Id" />
					<input type="hidden" name="id6" value="@enode.Item2.Id" />
					<button type="submit">Enable Exit Node</button>
				</form>
				}
			</td>
		</tr>
	}
	</tbody>
</table>

<h2>Other Users' Nodes</h2>

<table>
	<thead>
	<th>Name</th>
	<th>IP Addresses</th>
	<th>Status</th>
	<th>Owner</th>
	</thead>
	<tbody>
	@foreach (var node in Model.OtherNodes.OrderBy(n => n.User?.Id).ThenBy(n => n.Id))
	{
		var hasENode     = Model.YourExitNodes.TryGetValue(node.Id, out var enode);
		var eNodeEnabled = hasENode && (enode.Item1.Enabled && enode.Item2.Enabled);
		
		<tr>
			<td>@node.GivenName @(node.GivenName != node.Name ? $"({node.Name})" : "")</td>
			<td>
				@foreach (var ip in (node.IpAddresses ?? []).Order())
				{
					<div><code>@ip</code></div>
				}
			</td>
			<td>
				<div>@(node.Online ? "Online" : $"Last seen {node.LastSeen.Parse()}")</div>
				@if (hasENode)
				{
				<div>Exit Node @(eNodeEnabled ? "Enabled" : "Advertised")</div>
				}
			</td>
			<td>@node.User?.Name</td>
		</tr>
	}
	</tbody>
</table>


<h2>Your Routes</h2>

<p>Exit nodes are not shown here.</p>

<table>
	<thead>
	<th>Machine</th>
	<th>Prefix</th>
	<th>Advertised</th>
	<th>Enabled</th>
	<th>Actions</th>
	</thead>
	<tbody>
	@foreach (var route in Model.YourOtherRoutes.OrderBy(r => r.Machine?.Id))
	{
	<tr>
		<td>@route.Machine?.GivenName</td>
		<td>@route.Prefix</td>
		<td>@(route.Advertised ? "Yes" : "No")</td>
		<td>@(route.Enabled ? "Yes" : "No")</td>
		<td class="formwrap">
			@if (route.Enabled)
			{
				<form asp-action="DisableRoute">
					<input type="hidden" name="id" value="@route.Id" />
					<button type="submit">Disable route</button>
				</form>
			}
			else if (route.Advertised)
			{
				<form asp-action="EnableRoute">
					<input type="hidden" name="id" value="@route.Id" />
					<button type="submit">Enable route</button>
				</form>
			}

			<form asp-action="DeleteRoute">
				<input type="hidden" name="id" value="@route.Id" />
				<button type="submit" onclick="this.parentElement.nextElementSibling.showModal(); event.preventDefault()">Delete Route</button>
			</form>
			<dialog>
				<p>Delete this route? This is irreversible.</p>
				<form asp-action="DeleteRoute">
					<input type="hidden" name="id" value="@route.Id" />
					<button type="submit">Yes, delete</button>
				</form>
				<form method="dialog">
					<button type="submit">No!</button>
				</form>
			</dialog>
		</td>
	</tr>
	}
	</tbody>
</table>

<h2>Other Users' Routes</h2>

<p>Exit nodes are not shown here.</p>

<table>
	<thead>
	<th>Machine</th>
	<th>Prefix</th>
	<th>Advertised</th>
	<th>Enabled</th>
	</thead>
	<tbody>
	@foreach (var route in Model.OtherOtherRoutes.OrderBy(r => r.Machine?.User?.Name).ThenBy(r => r.Machine?.Id))
	{
	<tr>
		<td>@route.Machine?.GivenName</td>
		<td>@route.Prefix</td>
		<td>@(route.Advertised ? "Yes" : "No")</td>
		<td>@(route.Enabled ? "Yes" : "No")</td>
	</tr>
	}
	</tbody>
</table>